# Importing the required library
from collections import defaultdict

# Function to calculate Levenshtein Distance (Edit Distance)
def levenshtein_distance(word1, word2):
    m, n = len(word1), len(word2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])

    return dp[m][n]

# BK-Tree Node class
class BKTreeNode:
    def __init__(self, word):
        self.word = word
        self.children = defaultdict(BKTreeNode)

# BK-Tree class
class BKTree:
    def __init__(self):
        self.root = None

    def add_word(self, word):
        if self.root is None:
            self.root = BKTreeNode(word)
        else:
            current = self.root
            while True:
                distance = levenshtein_distance(word, current.word)
                if distance not in current.children:
                    current.children[distance] = BKTreeNode(word)
                    break
                current = current.children[distance]

    def search(self, word, max_distance):
        results = []

        def search_recursive(node, word, max_distance):
            distance = levenshtein_distance(word, node.word)
            if distance <= max_distance:
                results.append((node.word, distance))

            for d in range(distance - max_distance, distance + max_distance + 1):
                if d in node.children:
                    search_recursive(node.children[d], word, max_distance)

        if self.root:
            search_recursive(self.root, word, max_distance)
        return sorted(results, key=lambda x: x[1])

# Spell Checker using BK-Tree
class SpellChecker:
    def __init__(self, dictionary):
        self.tree = BKTree()
        for word in dictionary:
            self.tree.add_word(word)

    def suggest(self, word, max_distance=2):
        return self.tree.search(word, max_distance)

# Example Usage
if __name__ == "__main__":
    # Input dictionary of words
    dictionary = ["apple", "apricot", "banana", "berry", "cherry", "date", "grape", "kiwi", "mango", "melon", "orange", "peach", "pear", "plum", "strawberry", "watermelon"]
    spell_checker = SpellChecker(dictionary)

    # Input misspelled word
    word = input("Enter a word: ").strip().lower()
    max_distance = int(input("Enter maximum edit distance (e.g., 2): "))

    # Suggestions
    suggestions = spell_checker.suggest(word, max_distance)
    if suggestions:
        print("\nSuggestions:")
        for suggestion, distance in suggestions:
            print(f"{suggestion} (Edit Distance: {distance})")
    else:
        print("\nNo suggestions found.")
